
/*
# This file was generated by the "pgtozod" utility.
# The "pgtozod" utility is used to convert PostgreSQL database schemas into Zod schemas.

This file contains two custom Zod schemas for validating and transforming date objects:

1. `zodUtcDate`: This schema validates that the input is a JavaScript `Date` object, transforms it to UTC format, and defaults to the current date and time if no value is provided. This can be useful when you want to ensure that all dates are stored in UTC format in your database, regardless of the timezone of the input date.

2. `zodDateOnly`: This schema validates that the input is a `Date` object representing a date without a time component (i.e., the hours, minutes, seconds, and milliseconds are all zero). This can be useful when you want to store dates without time information in your database, such as birth dates or event dates.

3. `zodUUID`: This schema validates that the input is a string and matches the UUID format. This can be useful when you want to validate UUIDs in your application, such as user IDs or other unique identifiers.

*/

import { z } from 'zod'
import type { ZodType } from 'zod'

// The `zodUtcDate` function is a custom Zod schema that validates and transforms a JavaScript `Date`
// object into UTC format.
export const zodUtcDate = (readableName: string): ZodType<Date> =>
	z
		.date()
		.refine(
			(arg: unknown) => Object.prototype.toString.call(arg) === '[object Date]',
			`${readableName} must be a valid date`
		)
		.transform((arg: Date) => {
			// Convert the date to UTC
			return new Date(
				Date.UTC(
					arg.getFullYear(),
					arg.getMonth(),
					arg.getDate(),
					arg.getHours(),
					arg.getMinutes(),
					arg.getSeconds()
				)
			)
		})

// The `zodDateOnly` function is a custom Zod schema that validates that the input is a `Date` object
// representing a date without a time component. It takes a `readableName` parameter, which is used in
// the error message if the validation fails.
export const zodDateOnly = (readableName: string): ZodType<Date> =>
	z.custom<Date>(
		(value) => {
			if (!(value instanceof Date)) {
				return false
			}

			const dateCopy = new Date(value.getTime())
			dateCopy.setHours(0, 0, 0, 0)

			return value.getTime() === dateCopy.getTime()
		},
		{ message: `${readableName} must be a date without time component` }
	)

// The `zodUUID` function is a custom Zod schema that validates that the input is a string and matches
// the UUID format. It takes a `readableName` parameter, which is used in the error message if the
// validation fails.
export const zodUUID = (readableName: string): ZodType<string> => {
	return z.custom(
		(val) =>
			typeof val === 'string' &&
			/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(val),
		{ message: `${readableName} must be a valid UUID` }
	)
}
