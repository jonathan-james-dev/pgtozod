
/*
# This file was generated by the "pgtozod" utility.
# The "pgtozod" utility is used to convert PostgreSQL database schemas into Zod schemas.

This file contains two custom Zod schemas for validating and transforming date objects:

1. `zodUtcDate`: This schema validates that the input is a JavaScript `Date` object, transforms it to UTC format, and defaults to the current date and time if no value is provided. This can be useful when you want to ensure that all dates are stored in UTC format in your database, regardless of the timezone of the input date.

2. `zodDateOnly`: This schema validates that the input is a `Date` object representing a date without a time component (i.e., the hours, minutes, seconds, and milliseconds are all zero). This can be useful when you want to store dates without time information in your database, such as birth dates or event dates.

*/

export const zodUtcDate = (readableName: string) =>
	z.date().transform((arg: unknown, ctx: RefinementCtx) => {
		if (arg instanceof Date) {
			// Convert the date to UTC
			return new Date(
				Date.UTC(
					arg.getFullYear(),
					arg.getMonth(),
					arg.getDate(),
					arg.getHours(),
					arg.getMinutes(),
					arg.getSeconds()
				)
			)
		}
		return ctx.addIssue({
			code: z.ZodIssueCode.custom,
			message: `${readableName} must a valid UTC date and time`
		})
	})

export const zodDateOnly = (readableName: string) =>
	z.custom<Date>(
		(value) => {
			if (!(value instanceof Date)) {
				return false
			}

			const dateCopy = new Date(value.getTime())
			dateCopy.setHours(0, 0, 0, 0)

			return value.getTime() === dateCopy.getTime()
		},
		{ message: `${readableName} must a date without time component` }
	)

export const zodUUID = (readableName: string) => {
	return `z.custom((val) => typeof val === 'string' && /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(val), { message: '${readableName} must be a valid UUID' })`
}
